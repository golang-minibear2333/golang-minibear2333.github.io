<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go语言精进之路</title><link>https://golang.coding3min.com/</link><description>Recent content on Go语言精进之路</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 26 Jun 2021 02:39:47 +0800</lastBuildDate><atom:link href="https://golang.coding3min.com/index.xml" rel="self" type="application/rss+xml"/><item><title>可热更新的定时器</title><link>https://golang.coding3min.com/1.base/1-2-hello-world/</link><pubDate>Sat, 26 Jun 2021 02:39:47 +0800</pubDate><guid>https://golang.coding3min.com/1.base/1-2-hello-world/</guid><description>1.2.1 hello world # Go 语言是谷歌 2009 发布的第二款开源编程语言。
Go 语言专门针对多处理器系统应用程序的编程进行了优化，使用 Go 编译的程序可以媲美 C 或 C++代码的速度，而且更加安全、支持并行进程。
1.2.1 为什么要选择学习 Go 语言呢？与其他语言的应用相比，它有什么优点呢？ # 1、学习曲线它包含了类 C 语法、GC 内置和工程工具。这一点非常重要，因为 Go 语言容易学习，所以一个普通的大学生花一个星期就能写出来可以上手的、高性能的应用。在国内大家都追求快，这也是为什么国内 Go 流行的原因之一。
2、效率 Go 拥有接近 C 的运行效率和接近 PHP 的开发效率，这就很有利的支撑了上面大家追求快速的需求。
3、出身名门、血统纯正之所以说 Go 语言出身名门，是因为我们知道 Go 语言出自 Google 公司，这个公司在业界的知名度和实力自然不用多说。Google 公司聚集了一批牛人，在各种编程语言称雄争霸的局面下推出新的编程语言，自然有它的战略考虑。而且从 Go 语言的发展态势来看，Google 对它这个新的宠儿还是很看重的，Go 自然有一个良好的发展前途。我们看看 Go 语言的主要创造者，血统纯正这点就可见端倪了。
4、自由高效：组合的思想、无侵入式的接口 Go 语言可以说是开发效率和运行效率二者的完美融合，天生的并发编程支持。Go 语言支持当前所有的编程范式，包括过程式编程、面向对象编程以及函数式编程。程序员们可以各取所需、自由组合、想怎么玩就怎么玩。
5、强大的标准库这包括互联网应用、系统编程和网络编程。Go 里面的标准库基本上已经是非常稳定了，特别是我这里提到的三个，网络层、系统层的库非常实用。
6、部署方便：二进制文件、Copy 部署我相信这一点是很多人选择 Go 的最大理由，因为部署太方便了，所以现在也有很多人用 Go 开发运维程序。
7、简单的并发它包含了降低心智的并发和简易的数据同步，我觉得这是 Go 最大的特色。之所以写正确的并发、容错和可扩展的程序如此之难，是因为我们用了错误的工具和错误的抽象，Go 可以说这一块做的相当简单。
8、稳定性 Go 拥有强大的编译检查、严格的编码规范和完整的软件生命周期工具，具有很强的稳定性，稳定压倒一切。那么为什么 Go 相比于其他程序会更稳定呢？这是因为 Go 提供了软件生命周期（开发、测试、部署、维护等等）的各个环节的工具，如 go tool、gofmt、go test。</description></item><item><title/><link>https://golang.coding3min.com/1.base/1-1-install-download/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/1.base/1-1-install-download/</guid><description>1.1 安装和下载 # 1.1.1 下载位置 # go语言中文网
1.1.2 如何安装 # 为你的系统下载了相应的安装包后，请按照 安装说明 进行安装。
如果你选择从源码构建，请参考 从源码进行安装 。
查看 发布历史 了解更多关于 Go 各版本的发布说明。
1.1.3 小结 # 安装其实很容易，如果出现什么安装问题欢迎留言</description></item><item><title/><link>https://golang.coding3min.com/1.base/1-3-go-mod/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/1.base/1-3-go-mod/</guid><description>1.3 go mod最佳实践 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/1.base/1.3-go-mod
java 里有一个叫 maven 的包管理工具， go 也有一个叫 go mod 的管理工具，可以管理项目引用的第三方包版本、自动识别项目中用到的包、自动下载和管理包。
为什么要使用go mod？
使用go mod仓库中可以不用再上传依赖代码包，防止代码仓库过大浪费以及多个项目同时用包时的浪费 可以管理引用包的版本，这一点是gopath（src模式）和vendor做不到的 如果依赖gopath不同项目如果引用了同一个软件包的不同版本，就会造成编译麻烦 gopath是go之前的默认策略，每个项目在运行时都要严格放在src目录下，而go mod不用
原来的包管理方式
在不使用额外的工具的情况下，Go 的依赖包需要手工下载， 第三方包没有版本的概念，如果第三方包的作者做了不兼容升级，会让开发者很难受 协作开发时，需要统一各个开发成员本地$GOPATH/src下的依赖包 引用的包引用了已经转移的包，而作者没改的话，需要自己修改引用。 第三方包和自己的包的源码都在src下，很混乱。对于混合技术栈的项目来说，目录的存放会有一些问题 新的包管理模式解决了以上问题
自动下载依赖包 项目不必放在$GOPATH/src内了 项目内会生成一个go.mod文件，列出包依赖 所以来的第三方包会准确的指定版本号 对于已经转移的包，可以用 replace 申明替换，不需要改代码 1.3.1 配置 # golang&amp;gt;=1.12 添加环境变量 GO111MODULE 为 on 或者 auto ，设置方法
go env GO111MODULE=on go env -w GO111MODULE=&amp;#34;on&amp;#34; go env -w GOPROXY=https://goproxy.io go mod init 项目名 go mod tidy #add missing and remove unused modules 打开go mod 模式 使用国内下载包代理 初始化mod项目 自动增加包和删除无用包到 GOPATH 目录下（build的时候也会自动下载包加入到go.</description></item><item><title/><link>https://golang.coding3min.com/1.base/1-4-variables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/1.base/1-4-variables/</guid><description>1.4 声明【变量】的各种方式 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/1.base/1.4-variables
讲变量就要先知道 go 语言有哪些数据类型。
1.4.1 数据类型 # 数据类型的出现是为了把数据分成所需内存大小不同的数据。
布尔型(bool): 值只可以是常量 true 或者 false。 数字类型: 整型 int 和浮点型 float，支持复数（业务代码用不到），其中位的运算采用补码。 字符串类型（string）: 使用UTF-8编码标识Unicode文本。 其他：指针、数组、结构体(struct)、联合体 (union不常用)、函数、切片、接口（interface）、Map 、 Channel 大多数类型都是接触过的，比如c++的结构体，比如python的切片，java的接口，别看类型那么多以后写多了自然就会用了。
go 语言声明变量的方式非常简单
1.4.2 第一种方式、var # var name string 结构为var+变量名+类型
name = &amp;#34;s&amp;#34; 像这样赋值
//根据赋值自动判断类型 var p = name 因为name是字符串类型，所以p也是同类型
//多变量声明,int类型不赋值自动赋值为0，比如d e f var a, b, c = 1, 2, 3 var d, e, f int 一次声明多个类型不同的变量</description></item><item><title/><link>https://golang.coding3min.com/1.base/1-5-switch%E5%92%8Ctypeswitch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/1.base/1-5-switch%E5%92%8Ctypeswitch/</guid><description>1.5 switch和type switch # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/1.base/1.5-switch-type-switch
1.5.1 if else # if 20&amp;gt;0{ fmt.Println(&amp;#34;yes&amp;#34;) } 输出
yes ifelse
if 20&amp;lt;0{ }else{ fmt.Println(&amp;#34;no&amp;#34;) } 输出
no 1.5.2 switch 和 type switch # switch 好理解,是一个替代if else else else接口而提出的,如下，switch 后跟变量，case 后跟常量，只要变量值和常量匹配，就执行该分支下的语句。
switch name { case &amp;#34;coding3min&amp;#34;: fmt.Println(&amp;#34;welcome&amp;#34; + name) default: fmt.Println(&amp;#34;403 forbidden:&amp;#34; + name) return } 和c++不同，不需要给每个case都手动加入break，当然switch语句会逐个匹配case语句，一个一个的判断过去，直到有符合的语句存在，执行匹配的语句内容后跳出switch。
func switchDemo(number int) { switch { case number &amp;gt;= 90: fmt.</description></item><item><title/><link>https://golang.coding3min.com/1.base/1-6-for-range/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/1.base/1-6-for-range/</guid><description>1.6 循环 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/1.base/1.6-for-range
今天 go 语言的内容是循环。
由于在不少实际问题中有许多具有规律性的重复操作，因此在程序中就需要重复执行某些语句。
go 语言的循环和其他的没什么不同，只是语法上略微有些差别。
1.6.1 for 循环方式 1 和 c++、java 相似 # nums := []int{1, 2, 3, 4, 5, 6} for i := 0; i &amp;lt; len(nums); i++ { fmt.Println(i) } 1.6.2 for 循环方式 2 省略赋值和++ # a, b := 1, 5 for a &amp;lt; b { fmt.Println(a) a++ } 1.6.3 for 循环方式 3 迭代 # 优点：不用引入无意义的变量 缺点：不是直接索引，如果数据量极大会有性能损耗 for index, value := range nums { fmt.</description></item><item><title/><link>https://golang.coding3min.com/1.base/1-7-range%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/1.base/1-7-range%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</guid><description>1.7 range深度解析 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/1.base/1.7-range-deep
1.7.1 range（范围） # range 关键字在 go 语言中是相当常用好用的语法糖，可以用在 for 循环中迭代 array、slice、map、channel、字符串所有涉及到遍历输出的东西。
1.7.2 怎么用？ # 我们在前一节 循环 中初次触及到了 range，也知道他可以省略key，或者省略value来循环遍历的特性，但是这种特性要结合实际情况考量该用哪一个。
切片迭代
nums := []int{1, 2, 3} for k, v := range nums { fmt.Printf(&amp;#34;key: %v , value: %v \n&amp;#34;, k, v) } 这和迭代方式非常适合用for-range语句，如果减少赋值，直接索引num[key]可以减少损耗。如下
for k, _:= range nums { map迭代 注意，从 Go1开始，遍历的起始节点就是随机了。
kvs := map[string]string{ &amp;#34;a&amp;#34;:&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;:&amp;#34;b&amp;#34;, } for k, v := range kvs { fmt.</description></item><item><title/><link>https://golang.coding3min.com/1.base/1.3-go-mod/vendor/github.com/sirupsen/logrus/changelog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/1.base/1.3-go-mod/vendor/github.com/sirupsen/logrus/changelog/</guid><description>1.8.1 # Code quality:
move magefile in its own subdir/submodule to remove magefile dependency on logrus consumer improve timestamp format documentation Fixes:
fix race condition on logger hooks 1.8.0 # Correct versioning number replacing v1.7.1.
1.7.1 # Beware this release has introduced a new public API and its semver is therefore incorrect.
Code quality:
use go 1.15 in travis use magefile as task runner Fixes:</description></item><item><title/><link>https://golang.coding3min.com/1.base/1.3-go-mod/vendor/github.com/sirupsen/logrus/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/1.base/1.3-go-mod/vendor/github.com/sirupsen/logrus/readme/</guid><description>Logrus # Logrus is a structured logger for Go (golang), completely API compatible with the standard library logger.
Logrus is in maintenance-mode. We will not be introducing new features. It&amp;rsquo;s simply too hard to do in a way that won&amp;rsquo;t break many people&amp;rsquo;s projects, which is the last thing you want from your Logging library (again&amp;hellip;).
This does not mean Logrus is dead. Logrus will continue to be maintained for security, (backwards compatible) bug fixes, and performance (where we are limited by the interface).</description></item><item><title/><link>https://golang.coding3min.com/1.base/1.3-go-mod/vendor/golang.org/x/sys/unix/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/1.base/1.3-go-mod/vendor/golang.org/x/sys/unix/readme/</guid><description>Building sys/unix # The sys/unix package provides access to the raw system call interface of the underlying operating system. See: https://godoc.org/golang.org/x/sys/unix
Porting Go to a new architecture/OS combination or adding syscalls, types, or constants to an existing architecture/OS pair requires some manual effort; however, there are tools that automate much of the process.
Build Systems # There are currently two ways we generate the necessary files. We are currently migrating the build system to use containers so the builds are reproducible.</description></item><item><title/><link>https://golang.coding3min.com/2.func-containers/2-1-func/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-1-func/</guid><description>2.1 函数简单使用和基本知识解析 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.1-func
这里的源码有多个，本节相关的有
# 函数的简单使用 main.go # 函数当作变量使用，当做 参数传递 function_value.go # 值传递和引用传递 more.go # 递归函数 recursive.go 拓展代码有
# 函数当作变量使用，当做 参数传递的分页实践 function_value_good_demo.go # 函数方法(go中定义一个类) go_class.go 2.1.1 基本原理 # 函数，几乎是每种编程语言的必备语法，通过函数把一系列的动作汇总起来，在不同的地方重复使用。
我们在数学中曾经就使用过函数，他的形式类似于y=f（x），这就是一个完整的调用过程，y就是函数计算后得到的值，x就是传入的变量。
2.1.2 怎么用？ # 相信在看这个教程的人肯定已经接触过其他的编程语言，我就不多废话了，就是干。
go语言中最基本的函数是这样的，以func为关键字标记函数
func functionParam(num int) { } 当然了，可以有多个形参，类型相同时可以省略，如下
//多个参数的函数 func functionParams(a, b int, c string) { } 上面说过的函数都没有返回值，一般的函数都有返回值，没有返回值的函数要么是引用传递，可以直接改变参数内容，要么就是用于单元测试或者打印输出等。
没有返回值的函数就像一个不完整的男人，只能接受不能输出，来看看这个男人有一个输出的情况。
返回值标记在函数第一个括号后面，由于go语言是强类型语言，但又和python不同，要写出返回值类型。
//一个返回值 func funcReturnOne() int { return 1 } 如果说是有多个返回值，要用打括号括起来。</description></item><item><title/><link>https://golang.coding3min.com/2.func-containers/2-2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/</guid><description>2.2 匿名函数和闭包 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.2-no-name-func
与本节相关的有，匿名函数没有留源代码
2.2.1 匿名函数 # 话不多说，今天小熊就带各位家人感受下go语言函数中的高级语法。
在 前面的文章 里我们学会了把函数当作变量传递，可以在不改动原有函数内部实现的情况下，改变函数实现细节（设计模式：装饰器）。
这种情况下的作为变量传递的函数往往只有这一个地方用到了，其他地方不会重复使用。那就没必要单独定义一个函数在外面！（多此一举的事本熊不做！）
like this:
func functionValue(a, b int, do func(int, int) int) { fmt.Println(do(a, b)) } //使用匿名函数的方法调用他 实现匿名加函数 functionValue(1,2,func(a,b int) int{ return a+b }) //使用匿名函数的方法调用他 实现匿名减函数 functionValue(1,2,func(a,b int) int{ return a-b }) 输出
3 -1 在调用的时候我们才实现了一个匿名函数（没有名字的函数）
那是不是只有把函数当变量传递的时候才用到匿名函数呢？并，不，是！
各位同学，让我上黑板给大家实现一个简单的匿名函数用法。
f := func(i int) { fmt.Println(i) } f(1) 把匿名函数赋值给一个变量(这里是f)，f就是他的函数名，后面就可以直接调用啦~，但是这种简单使用的情况实际上会不会用到呢？很残酷，几乎没有。
匿名函数配合下面的场景使用效果更佳。
2.2.2 闭包 # 你有没有一种情况，常常要定义好多全局变量来共享数据，这种变量一旦多了非常难看，还会污染环境，有没有一种办法，可以通过重复调用同一个函数，来修改函数内部的变量呢？
我翻来覆去发现是真的有！这个东西就叫闭包！</description></item><item><title/><link>https://golang.coding3min.com/2.func-containers/2-3-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-3-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</guid><description>2.3 可变参数 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.3-varargs
接连两篇函数专题深度解析，相信大家已经对函数的语法有了深入的了解。
这次小熊给大家带来了一个函数的特性【可变参数】，作为函数专题的结束。
2.3.1 有没有发现？ # 我们有时候会用到的输出、错误输出、字符串格式化系统函数，你可以传入任意个数的参数，他全都能处理！
fmt.Println(&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;) 就像一个任劳任怨的老父亲，那到底是为什么呢？
2.3.2 因为 # 因为在go语言中语言级别自带了一种语法，可以声明可变参数！
func 函数名(固定参数，v ...T) (返回参数列表){ 函数体 } 2.3.3 怎么用？ # 先和小熊一起试试，写一个不定参数累加的函数
func sum(t ...int) (res int) { for _, v := range t { res += v } return res } fmt.Println(sum(1, 2, 3, 4, 5)) 输出结果
15 2.3.4 如果连参数类型都不知道，怎么办？ # 上一节我们已知参数类型是int，还记得我们前面说过的switch判断类型做处理的例子吗？ switch和type switch。
参考这个例子重写下函数，让他可以接收任意类型的参数。
func sumNum(t .</description></item><item><title/><link>https://golang.coding3min.com/2.func-containers/2-4-map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-4-map/</guid><description>2.4 map # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.4-map
2.4.1 映射关系容器 map # Go语言提供的映射关系容器为 map ， map 使用散列表hash实现。查找复杂度为O(1)，和数组一样，最坏的情况下为O(n),n为元素总数。
这就是Go中map的定义格式。
map[keyType] valueType 注意了，map 是一种引用类型，初值是nil,定义时必须用make来创建，否则会报错
panic: assignment to entry in nil map 必须要申请空间，所有的引用类型都要这么做
var m map[string]string m = make(map[string]string) 当然，也可以这么写
m := make(map[string]string) 2.4.2 使用 # 赋值
m[&amp;#34;name&amp;#34;] = &amp;#34;coding3min&amp;#34; m[&amp;#34;sex&amp;#34;] = &amp;#34;man&amp;#34; 循环遍历
for key := range m { // 原来不用Printf也可以完成拼接输出啊！ fmt.Println(&amp;#34;key:&amp;#34;, key, &amp;#34;,value:&amp;#34;, m[key]) } 删除集合元素
delete(m, &amp;#34;name&amp;#34;) PS: 在取值的时候m[key]，假如key不存在，不会报错，会返回value类型的默认值，比如int类型默认值为0</description></item><item><title/><link>https://golang.coding3min.com/2.func-containers/2-5-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-5-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</guid><description>2.5 数组和切片 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.5-arrray https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.5-slice
2.5.1 Golang中的数组 # 其实在 循环 那一节用到过数组，我快速介绍一下。
数组中是固定长度的连续空间（内存区域） 数组中所有元素的类型是一样的 var a1 [10]int //初始化数组 var b1 = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 多维数组
//声明二维数组，只要 任意加中括号，可以声明更多维，相应占用空间指数上指 var arr [3][3]int //赋值 arr = [3][3]int{ {1, 2, 3}, {2, 3, 4}, {3, 4, 5}, } 2.5.2 何谓切片？ # 类比c语言，一个int型数组int a[10],a的类型是int*，也就是整型指针，而c语言中可以使用malloc()动态的分配一段内存区域，c++中可以用new()函数。例如：
int* a = (int *)malloc(10); int* b = new int(4); 此时，a和b的类型也是int*，a和b此时分配内存的方式类似于go语言中的切片。</description></item><item><title/><link>https://golang.coding3min.com/3.grammar-advancement/3-1-point/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/3.grammar-advancement/3-1-point/</guid><description>3.1 指针讨论 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/3.grammar-advancement/3.1-point
3.1.1 指针 # c 中有指针的概念，在 go 中也有，但是实际上用的比较少，因为指针容易出错，而且不易阅读。
每个变量都有他的地址
var a int fmt.Printf(&amp;#34;a 的地址是：%p \n&amp;#34;, &amp;amp;a) 输出
a 的地址是：0xc0000b2008 指针用来存地址
//声明 变量名 + 指针类型 , 命令规则以ptr结尾 var ptr *int /* 指向整型*/ // var fp *float32 /* 指向浮点型 */ ptr = &amp;amp;a // 变量内部存的值是普通类型，指针内部存的值是地址 fmt.Printf(&amp;#34;ptr 存的值是：%p \n&amp;#34;, ptr) 输出，可以看到 ptr 存的值就是 a 的地址。
ptr 存的值是：0xc0000b2008 存的就是 a 的地址，ptr 的指向*ptr 肯定就是 a 本身了。
if a == *ptr { fmt.</description></item><item><title/><link>https://golang.coding3min.com/3.grammar-advancement/3-2-struct/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/3.grammar-advancement/3-2-struct/</guid><description>3.2 结构体 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/3.grammar-advancement/3.2-struct
3.2.1 go 语言中的结构体 # 和 c++ 的结构体类似，如下定义一个结构体类型。
type Body struct { name string age int } 像这样就可以使用
var body Body body.name = &amp;#34;coding3min&amp;#34; body.age = 12 fmt.Println(body) 输出
{coding3min 12} 3.2.2 go 中的类 # 结构体在 go 中是最常用的一种语法，有没有想过为什么？
这是因为我们学过一些面向对象的语言，其中有一个叫类的概念，但是 go 里面没有。
go 用一种特殊的方式，把结构体本身看作一个类。
一个成熟的类，具备成员变量和成员函数，结构体本身就有成员变量，再给他绑定上成员函数，是不是就可以了！
type people struct { name string } func (p people) toString() { fmt.Println(p.name) fmt.Printf(&amp;#34;p的地址 %p \n&amp;#34;, &amp;amp;p) } 上面给 people 结构体绑定了一个函数, 调用下看看</description></item><item><title/><link>https://golang.coding3min.com/3.grammar-advancement/3-3-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/3.grammar-advancement/3-3-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%A4%9A%E6%80%81/</guid><description>3.3 接口与多态 # 今天和大家聊聊 golang 的接口（ interface ）
本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/3.grammar-advancement/3.3-interface
3.3.1 接口 # 接口同 java 一样，可以把一堆有共性的方法定义在里面，但是比 java 灵活的是，不需要显式实现接口，你可以自己控制实现哪些方法。
不需要显式实现的意思是，不需要像 java 那样 implements interface 写出来，别急，看完下面的例子就知道了。
定义一个接口。
type humanInterface interface { eat() string play() string } 定义一个结构体（类）
type man struct { name string } 实现接口，语法和 给结构体添加方法 一样，完全看不出来 接口 的身影。
func (p man) eat() string { return &amp;#34;eat banana&amp;#34; } func (p man) play() string { return &amp;#34;play game&amp;#34; } 上面的代码给结构体添加了和接口一样的方法，只要完全实现接口中的方式，默认这就实现接口（隐式）。</description></item><item><title/><link>https://golang.coding3min.com/3.grammar-advancement/3-4-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/3.grammar-advancement/3-4-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid><description>3.4 异常处理 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/3.grammar-advancement/3.4-errors
3.4.1 异常处理思想 # 在 go 语言里是没有 try catch 的概念的，因为 try catch 会消耗更多资源，而且不管从 try 里面哪个地方跳出来，都是对代码正常结构的一种破坏。
所以 go 语言的设计思想中主张
如果一个函数可能出现异常，那么应该把异常作为返回值，没有异常就返回 nil 每次调用可能出现异常的函数时，都应该主动进行检查，并做出反应，这种 if 语句术语叫卫述语句 所以异常应该总是掌握在我们的手上，保证每次操作产生的影响达到最小，保证程序即使部分地方出现问题，也不会影响整个程序的运行，及时的处理异常，这样就可以减轻上层处理异常的压力。
同时也不要让未知的异常使你的程序崩溃。
3.4.2 异常的形式 # 我们应该让异常以这样的形式出现
func Demo() (int, error) 我们应该让异常以这样的形式处理（卫述语句）
_,err := errorDemo() if err!=nil{ fmt.Println(err) return } 3.4.3 自定义异常 # 比如程序有一个功能为除法的函数，除数不能为 0 ，否则程序为出现异常，我们就要提前判断除数，如果为 0 返回一个异常。那他应该这么写。
func divisionInt(a, b int) (int, error) { if b == 0 { return -1, errors.</description></item><item><title/><link>https://golang.coding3min.com/4.concurrent/4-1-go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%89%B9%E6%80%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/4.concurrent/4-1-go%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%89%B9%E6%80%A7/</guid><description>4.1 go 语言中的并发特性 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/4.concurrent/4.1-goroutine/
以前我们写并发的程序一般是用多线程来实现，自己维护一个线程池，在恰当的时候创建、销毁、分配资源。
go 在并发方面为我们提供了一个语言级别的支持， goroutine 和 channel 相互配合，这决定了他的先天优势。
goroutine 也就是go协程，概念类似于线程， Go 程序运行时会自动调度和管理，系统能智能地将 goroutine 中的任务合理地分配给 CPU , 让这些任务尽量并发运作。
4.1.1 他和线程对比 # 从使用上讲
比线程更轻量级，可以创建十万、百万不用担心资源问题。 和 channel 搭配使用，实现高并发， goroutine 之间传输数据更方便。 如果访问同一个数据块，要小心数据竞态问题、共享锁还是互斥锁的选择问题、并发操作的数据同步问题（后面会说） 从其实现上讲
从资源上讲，线程的栈内存大小一般是固定的一般为 2MB ，虽然这个数值可以设置，但是 太大了浪费，太小了容易不够用, 而 goroutine 栈内存是可变的，初始一般为 2KB ，随着需求可以扩大达到 1GB。 所以 goroutine 十分的轻量级，且能满足不同的需求。 从调度上讲，线程的调度由 OS 的内核完成；线程的切换需要 CPU 寄存器 和 内存的数据交换 ，从而切换不同的线程上下文。 其触发方式为 CPU时钟 , 而 goroutine 的调度则比较轻量级，由自身的调度器完成。 协程同线程的关系，有些类似于 线程同进程的关系。 4.</description></item><item><title/><link>https://golang.coding3min.com/4.concurrent/4-2-goroutine-wait/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/4.concurrent/4-2-goroutine-wait/</guid><description>4.2 并发等待 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/4.concurrent/4.2-goroutine-wait/
4.2.1 简介 # goroutine 是 Golang 中非常有用的功能，有时候 goroutine 没执行完函数就返回了，如果希望等待当前的 goroutine 执行完成再接着往下执行，该怎么办？
func say(s string) { for i := 0; i &amp;lt; 3; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(&amp;#34;hello world&amp;#34;) fmt.Println(&amp;#34;over!&amp;#34;) } 输出 over！ , 主线程没有等待
4.2.2 使用 Sleep 等待 # func main() { go say(&amp;#34;hello world&amp;#34;) time.Sleep(time.Second*1) fmt.Println(&amp;#34;over!&amp;#34;) } 运行修改后的程序，结果如下：
hello world hello world hello world over!</description></item><item><title/><link>https://golang.coding3min.com/4.concurrent/4-3-channel/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/4.concurrent/4-3-channel/</guid><description>4.3 channel # 到这里你正在接触最核心和重要的知识！认真学习的你很棒！
本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/4.concurrent/4.3-channel/
4.3.1 什么是 channel # Go 是一门从语言级别就支持并发的编程语言， 它有一个设计哲学很特别 不要通过共享内存来通信，而应通过通信来共享内存 ，听起来是有一点绕。
在传统语言中并发使用全局变量来进行不同线程之间的数据共享，这种方式就是使用共享内存的方式进行通信。而 Go 会在协程和协程之间打一个隧道，通过这个隧道来传输数据（发送和接收）。
打个比方，我们平时肯定没少接触过队列，队列的特点是先进先出，多方生产插入，多方消费接收。这个队列/隧道就是channel。
channel 是 goroutine 之间互相通讯的东西，goroutine 之间用来发消息和接收消息。其实，就是在做 goroutine 之间的内存共享。
我们来看看具体是什么使用的。
4.3.2 声明与初始化 # channel是类型相关的，也就是说一个 channel 只能传递一种类型的值，这个类型需要在 channel 声明时指定。
channel 的一般声明形式：
var chanName chan 类型 与普通变量的声明不同的是在类型前面加了 channel 关键字，类型 则指定了这个 channel 所能传递的元素类型。示例：
var a chan int //声明一个传递元素类型为int的channel var b chan float64 var c chan string 通道是一个引用类型，初始值为nil，对于值为nil的通道，不论具体是什么类型，它们所属的接收和发送操作都会永久处于阻塞状态。
所以必须手动make初始化，示例：
a := make(chan int) //初始化一个int型的名为a的channel b := make(chan float64) c := make(chan string) 既然是队列，那就有大小，上面没声明具体的大小，被认为是无缓冲的（注意大小是 0，不是 1）也就是说必须有其他goroutine接收，不然就会阻塞在那。声明有缓冲的，指定大小就可以了。</description></item><item><title/><link>https://golang.coding3min.com/4.concurrent/4-4-deadlock/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/4.concurrent/4-4-deadlock/</guid><description>4.4 deadlock # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/4.concurrent/4.4-deadlock/
4.4.1 什么时候会导致死锁 # 在计算机组成原理里说过 死锁有三个必要条件他们分别是 循环等待、资源共享、非抢占式，在并发中出现通道死锁只有两种情况：
数据要发送，但是没有人接收 数据要接收，但是没有人发送 4.4.2 发送单个值时的死锁 # 牢记这两点问题就很清晰了，复习下之前的例子，会死锁
a := make(chan int) a &amp;lt;- 1 //将数据写入channel z := &amp;lt;-a //从channel中读取数据 有且只有一个协程时，无缓冲的通道 先发送会阻塞在发送，先接收会阻塞在接收处。 发送操作在接收者准备好之前是阻塞的，接收操作在发送之前是阻塞的， 解决办法就是改为缓冲通道，或者使用协程配对 解决方法一,协程配对，先发送还是先接收无所谓只要配对就好
chanInt := make(chan int) go func() { chanInt &amp;lt;- 1 }() res := &amp;lt;-chanInt 解决方法二，缓冲通道
chanInt := make(chan int,1) chanInt &amp;lt;- 2 res := &amp;lt;-chanInt 缓冲通道内部的消息数量用len()函数可以测试出来 缓冲通道的容量可以用cap()测试出来 在满足cap&amp;gt;len时候，因为没有满，发送不会阻塞 在len&amp;gt;0时，因为不为空，所以接收不会阻塞 使用缓冲通道可以让生产者和消费者减少阻塞的可能性，对异步操作更友好，不用等待对方准备，但是容量不应设置过大，不然会占用较多内存。</description></item><item><title/><link>https://golang.coding3min.com/4.concurrent/4-5-select/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/4.concurrent/4-5-select/</guid><description>4.4 select # &amp;hellip;本节正在编写，未完待续，催更请留言，我会收到邮件 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/4.concurrent/4.5-select
4.3.1 select与switch # 让我们来复习一下switch语句，在switch语句中，会逐个匹配case语句(可以是值也可以是表达式)，一个一个的判断过去，直到有符合的语句存在，执行匹配的语句内容后跳出switch。
func demo(number int){ switch{ case number &amp;gt;= 90: fmt.Println(&amp;#34;优秀&amp;#34;) default: fmt.Println(&amp;#34;太搓了&amp;#34;) } } 而 select 用于处理通道，它的语法与 switch 非常类似。
func main() { chanInt1, chanInt2 := make(chan int), make(chan int) go func() { defer close(chanInt1) defer close(chanInt2) chanInt1 &amp;lt;- 1 chanInt2 &amp;lt;- 2 }() time.Sleep(time.Millisecond) select { case data := &amp;lt;-chanInt1: fmt.Println(data) case data := &amp;lt;-chanInt2: fmt.</description></item><item><title/><link>https://golang.coding3min.com/4.concurrent/4-6-timeout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/4.concurrent/4-6-timeout/</guid><description>4.4 定时器 # &amp;hellip;本节正在编写，未完待续，催更请留言，我会收到邮件 # 超时关闭 # 完整代码
package main import &amp;#34;time&amp;#34; func main() { t := make(chan bool) ch := make(chan int) defer func() { close(ch) close(t) }() go func() { time.Sleep(1e9) //等待1秒 t &amp;lt;- true }() go func() { time.Sleep(time.Second * 2) ch &amp;lt;- 123 }() select { case &amp;lt;-ch: //从ch中读取数据 case &amp;lt;-t: //如果1秒后没有从ch中读取到数据，那么从t中读取，并进行下一步操作 } } 可热更新的定时器 # 废话不多说，直接上代码
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) type Server struct { tk *time.</description></item><item><title/><link>https://golang.coding3min.com/4.concurrent/4-7-%E6%B1%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/4.concurrent/4-7-%E6%B1%A0/</guid><description>&amp;hellip;本节正在编写，未完待续，催更请留言，我会收到邮件 #</description></item><item><title/><link>https://golang.coding3min.com/4.concurrent/%E5%AE%9E%E6%88%98-%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/4.concurrent/%E5%AE%9E%E6%88%98-%E6%97%A5%E5%BF%97%E7%9B%91%E6%8E%A7/</guid><description>&amp;hellip;本节正在编写，未完待续，催更请留言，我会收到邮件 #</description></item><item><title/><link>https://golang.coding3min.com/books-share/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/books-share/</guid><description>书籍推荐 # 我读过或者我正在读，觉得不错的书，推荐给大家，欢迎评论推荐或者留下在线书籍链接
PS：仅供学习，请勿传播
入门 # 《go语言圣经》 实战（建议深入学习前部分实战拜读） # 《go web编程实战派》 比较基础和全面 《go语言编程之旅》蓝色封面，2020年出的书 更适合有一定基础的人 进阶 # 《go专家编程》 《go语言并发之道》 《go并发编程实战》 《Go语言高并发与微服务实战》 深入 # 《深入解析Go》 底层研究 《极客时间go语言36讲》对新人不友好，逻辑有些混乱，比较熟悉语言时再拜读，我读了一半实在看不下去</description></item><item><title/><link>https://golang.coding3min.com/goland/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/goland/</guid><description>Goland常用快捷键 # 文件相关快捷键：
CTRL+E，打开最近浏览过的文件。 CTRL+SHIFT+E，打开最近更改的文件。 CTRL+N，可以快速打开struct结构体。 CTRL+SHIFT+N，可以快速打开文件。 代码格式化：
CTRL+ALT+T，可以把代码包在一个块内，例如if{…}else{…}。 CTRL+ALT+L，格式化代码。 CTRL+空格，代码提示。 CTRL+/，单行注释。CTRL+SHIFT+/，进行多行注释。 CTRL+B，快速打开光标处的结构体或方法（跳转到定义处）。 CTRL+“+/-”，可以将当前方法进行展开或折叠。 查找和定位
CTRL+R，替换文本。 CTRL+F，查找文本。 CTRL+SHIFT+F，进行全局查找。 CTRL+G，快速定位到某行。 代码编辑
ALT+Q，可以看到当前方法的声明。 CTRL+Backspace，按单词进行删除。 SHIFT+ENTER，可以向下插入新行，即使光标在当前行的中间。 CTRL+X，删除当前光标所在行。 CTRL+D，复制当前光标所在行。 ALT+SHIFT+UP/DOWN，可以将光标所在行的代码上下移动。 CTRL+SHIFT+U，可以将选中内容进行大小写转化。</description></item><item><title/><link>https://golang.coding3min.com/howtocontribute/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/howtocontribute/</guid><description>如何贡献项目 # 首先非常感谢你愿意参与贡献这个项目，让我们一起努力越做越好。
参与贡献你可以参考下面的方法
fork clone config # 在 GitHub 上fork到自己的仓库，如 xxx/golang，然后clone到本地，并设置用户信息。
$ git clone git@github.com:xxx/golang.git $ cd golang $ git config user.name &amp;#34;yourname&amp;#34; $ git config user.email &amp;#34;your email&amp;#34; commit push # 修改代码后提交，并推送到自己的仓库。
$ #do some change on the content $ git commit -m &amp;#34;Fix issue #1: change helo to hello&amp;#34; $ git push pr (pull request) # 在 GitHub 网站上提交 pull request。 当然了，如果你不会提pr，你可以参考我 给开源大项目贡献代码的文章</description></item><item><title/><link>https://golang.coding3min.com/impossible/range/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/impossible/range/readme/</guid><description>for range的一个坑 # for range是值拷贝出来的副本
在使用for range的时候，要注意的是，不管是slice还是map，循环的值都是被range值拷贝出来的副本值。 举个简单的例了
对于list
var t []Test t = append(t, Test{Index: 1, Num: 1}) t = append(t, Test{Index: 2, Num: 2}) // 实际上没有成功修改t.Num，因为是副本复制 for _, v := range t { v.Num += 100 } for _, v := range t { // 输出 // 1 1 // 2 2 fmt.Println(v.Index, v.Num) } 对于 map, 也不能这么搞，实际上都是复制
m := make(map[int]Test) m[0] = Test{Index: 1, Num: 1} m[1] = Test{Index: 2, Num: 2} for _, v := range m { v.</description></item><item><title/><link>https://golang.coding3min.com/impossible/%E5%88%9D%E5%AD%A6%E8%80%85%E5%B8%B8%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/impossible/%E5%88%9D%E5%AD%A6%E8%80%85%E5%B8%B8%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF/</guid><description>初学者常犯的错误 # 引用： Go 经典译文：50 个 Go 新手易犯的错误（2020版）
索引运算符和字符串 # 字符串上的 index 方法 （运算符） 返回一个字节值，而不是一个字符类型（就像在其他语言中一样）。
package main import &amp;#34;fmt&amp;#34; func main() { x := &amp;#34;text&amp;#34; fmt.Println(x[0]) //print 116 fmt.Printf(&amp;#34;%T&amp;#34;,x[0]) //prints uint8 } 如果需要访问特定字符串 “characters”（unicode 代码点 / 运行符），请使用 for range 语句。官方的 “unicode/utf8” 包和基础的 utf8string 包 （golang.org/x/exp/utf8string） 也很有用。utf8string 包有一个方便的 At() 方法，将字符串转换为切片也是一种选择。
使用 「for range」子句遍历 Map # level：初学者 如果你希望 Map 每项数据按照顺序排列 （例如，按键值顺序），这是不可能的，每次 Map 迭代会输出不一样的结果。GO 运行时可能会随机分配迭代顺序，因此你可能会得到几次相同的 Map 迭代结果也不用惊讶。</description></item><item><title/><link>https://golang.coding3min.com/impossible/%E6%96%B0%E6%89%8B%E5%B8%B8%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/impossible/%E6%96%B0%E6%89%8B%E5%B8%B8%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF/</guid><description>新手常犯的错误 # 引用： Go 经典译文：50 个 Go 新手易犯的错误（2020版）
花括号不能放在单独的一行 # 大多数使用花括号的语言中，你可以选择放置花括号的位置。 但 Go 不一样。 Go 在编译时会自动注入分号，花括号单独一行会导致分号注入错误（无需自己书写分号）。 所以 Go 其实是有分号的
错误的范例:
package main import &amp;#34;fmt&amp;#34; func main() { // 错误，不能将左大括号放在单独的行上 fmt.Println(&amp;#34;hello there!&amp;#34;) } 编译错误:
/tmp/sandbox826898458/main.go:6: 语法错误: { 前出现意外的分号或者新的一行
正确的写法:
package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;works!&amp;#34;) } 未使用的变量 # 如果存在未使用的变量会导致编译失败。但是有一个例外， 只有在函数内部声明的变量未使用才会导致报错，如果你有未使用的全局变量是没问题的，也可以存在未使用的函数参数。
如果给变量赋值但是没有使用该变量值，你的代码仍将无法编译。你需要以某种方式使用变量值以使编译器通过。
错误的范例：
package main var gvar int //not an error func main() { var one int //error, unused variable two := 2 //error, unused variable var three int //error, even though it&amp;#39;s assigned 3 on the next line three = 3 func(unused string) { fmt.</description></item><item><title/><link>https://golang.coding3min.com/impossible/%E8%BF%9B%E9%98%B6%E5%B8%B8%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/impossible/%E8%BF%9B%E9%98%B6%E5%B8%B8%E7%8A%AF%E7%9A%84%E9%94%99%E8%AF%AF/</guid><description>进阶常犯的错误 # 引用： Go 经典译文：50 个 Go 新手易犯的错误（2020版）
关闭 HTTP 响应 Body # 级别：中级 当使用 net/http 库发送 http 请求时，会返回一个 *http.Respose 变量。 如果你不读取响应 Body，依然需要关闭这个 Body。 注意对于空 Body 也必须关闭。 对于 GO 程序员新手很容易忘记这点。
一些 GO 程序员新手尝试关闭响应 Body，但他们在错误的位置进行了关闭 Body。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;io/ioutil&amp;#34; ) func main() { resp, err := http.Get(&amp;#34;https://api.ipify.org?format=json&amp;#34;) defer resp.Body.Close()//错误的方法 if err != nil { fmt.Println(err) return } body, err := ioutil.</description></item><item><title/><link>https://golang.coding3min.com/qrcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/qrcode/</guid><description/></item><item><title/><link>https://golang.coding3min.com/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/readme/</guid><description>Go语言精进之路 # 大家好，我是小熊，本书基于Go语言版本 1.16 版本，后续可能会再调整，目录也还未明确，正在努力持续更新中，整体进度未明。
如果对这个项目感兴趣 请 &amp;ndash;&amp;gt; 点击这里跳转项目进行Star ，项目会 持续更新，感谢大家的支持。
电子书见 -&amp;gt; Go语言精进之路-在线电子书 实战项目见 -&amp;gt; Golang实战练习库 语法速查 学习与交流 # 哪有那么多人生开挂，不过都是厚积薄发 。 我的个人网站: https://coding3min.com 我写的另一本书 程序员的魔法书 专门针对面试 基本会先更新在公众号，再同步到站点上。若想一起学习，欢迎加我的微信：qupzhi。
也可以关注公众号：
本书定位 # 本书给快速入门学习Go语言使用。更偏向于实战，计划扫清Go语言一切障碍，包括Go语言实战、Go语言并发，也希望能给学习Golang 的你一些帮助。
在本书中会持续迭代总结各种Go语言脚手架的使用方式与基本原理，是一本速查笔记，也是一本深入笔记，适合中、高级工程师学习收藏。
面向群体 # 有一定其他语言基础的 Go 语言爱好者 后端、云计算、安全等领域工作涉及到 Go 语言的工程师 想要进一步熟悉掌握Go并发、以及探索 Go 语言框架、开源项目的开发人员 为什么要写这本书 # 我的职业生涯非常丰富，做过研发、实施运维、架构的工作，数年前我学习过Java，接着从事C++开发的工作、后来工作中陆续接触过 C#、Python、Golang，目前专注于Golang研发。
虽然网上有很多入门与实战方面的书籍，但我想总结一下我工作或学习过程中接触到的知识，以供查阅。
关于版权 # 本书可能会借鉴其他书籍资料，一些网络图片，本书不作为商业用途，仅供学习交流，所借鉴内容来源于网络，会在文章末尾处标记引用位置。如源文章标记禁止引用则不会引用。</description></item><item><title/><link>https://golang.coding3min.com/todo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/todo/</guid><description>文章正在创作中 # 文章即将出炉，请耐心等待&amp;hellip;&amp;hellip;
你可以：
加入我一起完成这篇文章，重新梳理知识体系 欢迎给我提 pr 如果你从来没有提过 pr，可以参考 我给开源项目提pr的过程，这是很重要的一种代码协作能力 再次感谢你的支持</description></item><item><title/><link>https://golang.coding3min.com/tools/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/tools/readme/</guid><description>golang小工具 # 作用 位置 备注 代码测速 speed.go 可超时缓存 cache.go 任意类型变量缓存，可设置超时时间 线程安全的缓存 map.go 任意类型变量缓存，线程安全 配置proxy static_proxy.go 简单配置http proxy 捕获panic defer_panic.go 重试函数 func.go 可传入函数和重试次数，自动重试，要求返回是否成功 参数 go命令行读取参数 - 文件写入读取 - - 配置文件 - -</description></item><item><title/><link>https://golang.coding3min.com/%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E8%B7%B5/%E6%9E%84%E5%BB%BA%E7%BA%A6%E6%9D%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E8%B7%B5/%E6%9E%84%E5%BB%BA%E7%BA%A6%E6%9D%9F/</guid><description>nosplit 禁止内联 noescape 禁止逃逸 gengrate 生成命令 指定构建的版本，通过文件名或者注释约定代码在指定平台运行时起作用 embed</description></item><item><title/><link>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/flag%E5%8C%85%E8%AF%BB%E5%8F%96%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/flag%E5%8C%85%E8%AF%BB%E5%8F%96%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE/</guid><description>简介 # kingpin 功能比 flag 库强大，用法差不多。 相比 flag 库，最重要的一点就是支持不加 - 的调用。 比如一个命令行程序有三个函数分别为 A , B , C ，要实现根据命令行的输入运行不同的函数，如果用flag实现的话应该是下面这种使用方法：
./cli --method A ./cli --method B ./cli --method C 每次都需要输入 --method ，然而用 kingpin 库实现的话就可以达到下面这种效果：
./cli A ./cli B ./cli C 节省了很多输入操作。
使用方法 # go get gopkg.in/alecthomas/kingpin.v2 go mod vendor 这样子 go.mod 文件里就引入了， vendor 文件夹就缓存了此包，然后直接在代码中使用。
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;gopkg.in/alecthomas/kingpin.v2&amp;#34; &amp;#34;net/http&amp;#34; ) func main() { var ( listenAddress = kingpin.Flag( &amp;#34;web.</description></item><item><title/><link>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/golang%E6%89%93%E9%95%9C%E5%83%8Fdockerfile%E7%9A%84%E5%86%99%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/golang%E6%89%93%E9%95%9C%E5%83%8Fdockerfile%E7%9A%84%E5%86%99%E6%B3%95/</guid><description>引言 # 对于dockerfile而言，何为完美? 我认为应该满足以下三点：
体积小 构建快 够安全 PS: 注意！从 Docker 17.05 版本起， Docker 才开始支持容器镜像的多阶段构建(multi-stage build)，所以本文所使用 docker 版本必须高于 17.05 （多阶段构建的意思就是把编译的过程也放同一个 Dockerfile 里，不用在自己的开发机或服务器上编译，再把编译出的二进制程序打入镜像）
可联网的环境 # 根据官方的说法，从 Go 1.13 开始，模块管理模式将是 Go 语言开发的默认模式。
我们使用go mod 做包管理，就不需要有任何额外配置
FROMgolang:1.13.5-alpine3.10 AS builderWORKDIR/buildRUN adduser -u 10001 -D app-runnerENV GOPROXY https://goproxy.cnCOPY go.mod .COPY go.sum .RUN go mod downloadCOPY . .RUN CGO_ENABLED=0 GOARCH=64 GOOS=linux go build -a -o your-application .FROMalpine:3.10 AS finalWORKDIR/appCOPY --from=builder /build/your-application /app/#COPY --from=builder /build/config /app/configCOPY --from=builder /etc/passwd /etc/passwdCOPY --from=builder /etc/ssl/certs/ca-certificates.</description></item><item><title/><link>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/go%E4%BB%A3%E7%A0%81%E5%9F%BA%E6%9C%AC%E6%A0%87%E5%87%86%E8%A7%84%E8%8C%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/go%E4%BB%A3%E7%A0%81%E5%9F%BA%E6%9C%AC%E6%A0%87%E5%87%86%E8%A7%84%E8%8C%83/</guid><description>文档 # 不刻意制定详细文档 编码级别文档化，支持一键导出文档 统一的标准和习惯，提高可读性 # 三个统一
统一的日志 统一的接口规范：错误码、返回格式、国际化 统一编码习惯 统一编码习惯 # 变量常量
变量必须见名知义不得用拼音，且长度在 3-20 个字母 名词必须单数 常量必须全大写 所有程序必须有注释
提交记录必须指明 tapd 单号，功能，更新记录
代码文件名
必须见名知义，保证内部代码单一职责 文件夹必须与包名保持一致，全小写，尽量使用短命名，不能使用下划线、中划线等字符 函数
单个函数长度不超过 50 行 参数个数不要超过 5 个（参数过多通常意味着缺少封装，不易维护，容易出错） 函数返回值个数不要超过 3 个，如果超过，建议将其中关系密切的返回值参数封装成一个结构体。 格式化要求 提交代码时，必须使用 gofmt 对代码进行格式化 提交代码时，必须使用 golint 对代码进行检查。 字符串形式的 json 时，使用反单引号，而不是双引号。
&amp;#34;{\&amp;#34;key\&amp;#34;:\&amp;#34;value\&amp;#34;}&amp;#34; 改为格式更清晰的：
` { &amp;#34;key&amp;#34;:&amp;#34;value&amp;#34; } ` 接入自动格式化检查 # 接入自动化代码缺陷扫描 #</description></item><item><title/><link>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/go%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/go%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/</guid><description>Go 官方库的文件操作分散在多个包中，比如os、ioutil包，我本来想写一篇总结性的 Go 文件操作的文章，却发现已经有人 2015 年已经写了一篇这样的文章，写的非常好，所以我翻译成了中文，强烈推荐你阅读一下。
原文: Working with Files in Go, 作者: NanoDano
介绍 # 万物皆文件 # UNIX 的一个基础设计就是&amp;quot;万物皆文件&amp;quot;(everything is a file)。我们不必知道一个文件到底映射成什么，操作系统的设备驱动抽象成文件。操作系统为设备提供了文件格式的接口。
Go 语言中的 reader 和 writer 接口也类似。我们只需简单的读写字节，不必知道 reader 的数据来自哪里，也不必知道 writer 将数据发送到哪里。
你可以在/dev下查看可用的设备，有些可能需要较高的权限才能访问。
基本操作 # 创建空文件 # package main import ( &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; ) var ( newFile *os.File err error ) func main() { newFile, err = os.Create(&amp;#34;test.txt&amp;#34;) if err != nil { log.Fatal(err) } log.</description></item><item><title/><link>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/%E5%88%87%E7%89%87%E6%8E%92%E5%BA%8Fsort%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/%E7%95%AA%E5%A4%96.%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/%E5%88%87%E7%89%87%E6%8E%92%E5%BA%8Fsort%E5%8C%85%E7%9A%84%E4%BD%BF%E7%94%A8/</guid><description>golang的sort包提供了部分切片排序的函数和用户自定义数据集的函数。
排序切片 # func Example1() { arry := []int{5,8,3,1,4,2,7,6} fmt.Println(arry) sort.Ints(arry) fmt.Println(arry) // Output: // [5 8 3 1 4 2 7 6] // [1 2 3 4 5 6 7 8] } 排序用户自定义数据集 # type Person struct { Name string Age int } func (p Person) String() string { return fmt.Sprintf(&amp;#34;%s: %d&amp;#34;, p.Name, p.Age) } // ByAge implements sort.Interface for []Person based on // the Age field.</description></item></channel></rss>