<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>5.standard-libraries on Go语言精进之路</title><link>https://golang.coding3min.com/5.standard-library/</link><description>Recent content in 5.standard-libraries on Go语言精进之路</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://golang.coding3min.com/5.standard-library/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://golang.coding3min.com/5.standard-library/json/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/5.standard-library/json/</guid><description>json处理 # 日常工作中，最常用的数据传输格式就是json，而encoding/json库是内置做解析的库。这一节来看看它的用法，还有几个日常使用中隐晦的陷阱和处理技巧。
json与struct # 一个常见的接口返回内容如下：
{ &amp;#34;data&amp;#34;: { &amp;#34;items&amp;#34;: [ { &amp;#34;_id&amp;#34;: 2 } ], &amp;#34;total_count&amp;#34;: 1 }, &amp;#34;message&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;result_code&amp;#34;: 200 } 在golang中往往是要把json格式转换成结构体对象使用的。 新版Goland粘贴json会自动生成结构体，也可以在 http://json2struct.mervine.net 获得 json 到struct的自动转换。
type ResponseData struct { Data struct { Items []struct { Id int `json:&amp;#34;_id&amp;#34;` } `json:&amp;#34;items&amp;#34;` TotalCount int `json:&amp;#34;total_count&amp;#34;` } `json:&amp;#34;data&amp;#34;` Message string `json:&amp;#34;message&amp;#34;` ResultCode int `json:&amp;#34;result_code&amp;#34;` } 用反斜杠加注解的方式表明属于json中哪个字段，要注意不应该嵌套层数过多，难以阅读容易出错。
一般把内部结构体提出来，可能会另做他用。
type ResponseData struct { Data struct { Items []Body `json:&amp;#34;items&amp;#34;` TotalCount int64 `json:&amp;#34;total_count&amp;#34;` } `json:&amp;#34;data&amp;#34;` Message string `json:&amp;#34;message&amp;#34;` ResultCode int64 `json:&amp;#34;result_code&amp;#34;` } type Body struct { ID int `json:&amp;#34;_id&amp;#34;` } 解析 # 解析就是json字符串，转struct类型。如下，第一个参数为字节数组，第二个为接收的结构体实体地址。如有报错返回错误信息，如没有返回nil。</description></item></channel></rss>