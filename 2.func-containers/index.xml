<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2.func-containers on Go语言精进之路</title><link>https://golang.coding3min.com/2.func-containers/</link><description>Recent content in 2.func-containers on Go语言精进之路</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://golang.coding3min.com/2.func-containers/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://golang.coding3min.com/2.func-containers/2-1-func/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-1-func/</guid><description>2.1 函数简单使用和基本知识解析 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.1-func
这里的源码有多个，本节相关的有
# 函数的简单使用 main.go # 函数当作变量使用，当做 参数传递 function_value.go # 值传递和引用传递 more.go # 递归函数 recursive.go 拓展代码有
# 函数当作变量使用，当做 参数传递的分页实践 function_value_good_demo.go # 函数方法(go中定义一个类) go_class.go 2.1.1 基本原理 # 函数，几乎是每种编程语言的必备语法，通过函数把一系列的动作汇总起来，在不同的地方重复使用。
我们在数学中曾经就使用过函数，他的形式类似于y=f（x），这就是一个完整的调用过程，y就是函数计算后得到的值，x就是传入的变量。
2.1.2 怎么用？ # 相信在看这个教程的人肯定已经接触过其他的编程语言，我就不多废话了，就是干。
go语言中最基本的函数是这样的，以func为关键字标记函数
func functionParam(num int) { } 当然了，可以有多个形参，类型相同时可以省略，如下
//多个参数的函数 func functionParams(a, b int, c string) { } 上面说过的函数都没有返回值，一般的函数都有返回值，没有返回值的函数要么是引用传递，可以直接改变参数内容，要么就是用于单元测试或者打印输出等。
没有返回值的函数就像一个不完整的男人，只能接受不能输出，来看看这个男人有一个输出的情况。
返回值标记在函数第一个括号后面，由于go语言是强类型语言，但又和python不同，要写出返回值类型。
//一个返回值 func funcReturnOne() int { return 1 } 如果说是有多个返回值，要用打括号括起来。</description></item><item><title/><link>https://golang.coding3min.com/2.func-containers/2-2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-2-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/</guid><description>2.2 匿名函数和闭包 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.2-no-name-func
与本节相关的有，匿名函数没有留源代码
2.2.1 匿名函数 # 话不多说，今天小熊就带各位家人感受下go语言函数中的高级语法。
在 前面的文章 里我们学会了把函数当作变量传递，可以在不改动原有函数内部实现的情况下，改变函数实现细节（设计模式：装饰器）。
这种情况下的作为变量传递的函数往往只有这一个地方用到了，其他地方不会重复使用。那就没必要单独定义一个函数在外面！（多此一举的事本熊不做！）
like this:
func functionValue(a, b int, do func(int, int) int) { fmt.Println(do(a, b)) } //使用匿名函数的方法调用他 实现匿名加函数 functionValue(1,2,func(a,b int) int{ return a+b }) //使用匿名函数的方法调用他 实现匿名减函数 functionValue(1,2,func(a,b int) int{ return a-b }) 输出
3 -1 在调用的时候我们才实现了一个匿名函数（没有名字的函数）
那是不是只有把函数当变量传递的时候才用到匿名函数呢？并，不，是！
各位同学，让我上黑板给大家实现一个简单的匿名函数用法。
f := func(i int) { fmt.Println(i) } f(1) 把匿名函数赋值给一个变量(这里是f)，f就是他的函数名，后面就可以直接调用啦~，但是这种简单使用的情况实际上会不会用到呢？很残酷，几乎没有。
匿名函数配合下面的场景使用效果更佳。
2.2.2 闭包 # 你有没有一种情况，常常要定义好多全局变量来共享数据，这种变量一旦多了非常难看，还会污染环境，有没有一种办法，可以通过重复调用同一个函数，来修改函数内部的变量呢？
我翻来覆去发现是真的有！这个东西就叫闭包！</description></item><item><title/><link>https://golang.coding3min.com/2.func-containers/2-3-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-3-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/</guid><description>2.3 可变参数 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.3-varargs
接连两篇函数专题深度解析，相信大家已经对函数的语法有了深入的了解。
这次小熊给大家带来了一个函数的特性【可变参数】，作为函数专题的结束。
2.3.1 有没有发现？ # 我们有时候会用到的输出、错误输出、字符串格式化系统函数，你可以传入任意个数的参数，他全都能处理！
fmt.Println(&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;,&amp;#34;d&amp;#34;) 就像一个任劳任怨的老父亲，那到底是为什么呢？
2.3.2 因为 # 因为在go语言中语言级别自带了一种语法，可以声明可变参数！
func 函数名(固定参数，v ...T) (返回参数列表){ 函数体 } 2.3.3 怎么用？ # 先和小熊一起试试，写一个不定参数累加的函数
func sum(t ...int) (res int) { for _, v := range t { res += v } return res } fmt.Println(sum(1, 2, 3, 4, 5)) 输出结果
15 2.3.4 如果连参数类型都不知道，怎么办？ # 上一节我们已知参数类型是int，还记得我们前面说过的switch判断类型做处理的例子吗？ switch和type switch。
参考这个例子重写下函数，让他可以接收任意类型的参数。
func sumNum(t .</description></item><item><title/><link>https://golang.coding3min.com/2.func-containers/2-4-map/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-4-map/</guid><description>2.4 map # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.4-map
2.4.1 映射关系容器 map # Go语言提供的映射关系容器为 map ， map 使用散列表hash实现。查找复杂度为O(1)，和数组一样，最坏的情况下为O(n),n为元素总数。
这就是Go中map的定义格式。
map[keyType] valueType 注意了，map 是一种引用类型，初值是nil,定义时必须用make来创建，否则会报错
panic: assignment to entry in nil map 必须要申请空间，所有的引用类型都要这么做
var m map[string]string m = make(map[string]string) 当然，也可以这么写
m := make(map[string]string) 2.4.2 使用 # 赋值
m[&amp;#34;name&amp;#34;] = &amp;#34;coding3min&amp;#34; m[&amp;#34;sex&amp;#34;] = &amp;#34;man&amp;#34; 循环遍历
for key := range m { // 原来不用Printf也可以完成拼接输出啊！ fmt.Println(&amp;#34;key:&amp;#34;, key, &amp;#34;,value:&amp;#34;, m[key]) } 删除集合元素
delete(m, &amp;#34;name&amp;#34;) PS: 在取值的时候m[key]，假如key不存在，不会报错，会返回value类型的默认值，比如int类型默认值为0</description></item><item><title/><link>https://golang.coding3min.com/2.func-containers/2-5-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://golang.coding3min.com/2.func-containers/2-5-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</guid><description>2.5 数组和切片 # 本节源码位置 https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.5-arrray https://github.com/golang-minibear2333/golang/blob/master/2.func-containers/2.5-slice
2.5.1 Golang中的数组 # 其实在 循环 那一节用到过数组，我快速介绍一下。
数组中是固定长度的连续空间（内存区域） 数组中所有元素的类型是一样的 var a1 [10]int //初始化数组 var b1 = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 多维数组
//声明二维数组，只要 任意加中括号，可以声明更多维，相应占用空间指数上指 var arr [3][3]int //赋值 arr = [3][3]int{ {1, 2, 3}, {2, 3, 4}, {3, 4, 5}, } 2.5.2 何谓切片？ # 类比c语言，一个int型数组int a[10],a的类型是int*，也就是整型指针，而c语言中可以使用malloc()动态的分配一段内存区域，c++中可以用new()函数。例如：
int* a = (int *)malloc(10); int* b = new int(4); 此时，a和b的类型也是int*，a和b此时分配内存的方式类似于go语言中的切片。</description></item></channel></rss>